// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.0
// 	protoc        v3.11.4
// source: xbrl/v1/rpc.proto

package v1

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetTaxonomyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to GetBy:
	//	*GetTaxonomyRequest_TaxonomyId
	//	*GetTaxonomyRequest_TaxonomyPrefix
	//	*GetTaxonomyRequest_TaxonomyNamespace
	GetBy isGetTaxonomyRequest_GetBy `protobuf_oneof:"get_by"`
}

func (x *GetTaxonomyRequest) Reset() {
	*x = GetTaxonomyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xbrl_v1_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaxonomyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaxonomyRequest) ProtoMessage() {}

func (x *GetTaxonomyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xbrl_v1_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaxonomyRequest.ProtoReflect.Descriptor instead.
func (*GetTaxonomyRequest) Descriptor() ([]byte, []int) {
	return file_xbrl_v1_rpc_proto_rawDescGZIP(), []int{0}
}

func (m *GetTaxonomyRequest) GetGetBy() isGetTaxonomyRequest_GetBy {
	if m != nil {
		return m.GetBy
	}
	return nil
}

func (x *GetTaxonomyRequest) GetTaxonomyId() int32 {
	if x, ok := x.GetGetBy().(*GetTaxonomyRequest_TaxonomyId); ok {
		return x.TaxonomyId
	}
	return 0
}

func (x *GetTaxonomyRequest) GetTaxonomyPrefix() string {
	if x, ok := x.GetGetBy().(*GetTaxonomyRequest_TaxonomyPrefix); ok {
		return x.TaxonomyPrefix
	}
	return ""
}

func (x *GetTaxonomyRequest) GetTaxonomyNamespace() string {
	if x, ok := x.GetGetBy().(*GetTaxonomyRequest_TaxonomyNamespace); ok {
		return x.TaxonomyNamespace
	}
	return ""
}

type isGetTaxonomyRequest_GetBy interface {
	isGetTaxonomyRequest_GetBy()
}

type GetTaxonomyRequest_TaxonomyId struct {
	TaxonomyId int32 `protobuf:"varint,1,opt,name=taxonomy_id,json=taxonomyId,proto3,oneof"`
}

type GetTaxonomyRequest_TaxonomyPrefix struct {
	TaxonomyPrefix string `protobuf:"bytes,2,opt,name=taxonomy_prefix,json=taxonomyPrefix,proto3,oneof"`
}

type GetTaxonomyRequest_TaxonomyNamespace struct {
	TaxonomyNamespace string `protobuf:"bytes,3,opt,name=taxonomy_namespace,json=taxonomyNamespace,proto3,oneof"`
}

func (*GetTaxonomyRequest_TaxonomyId) isGetTaxonomyRequest_GetBy() {}

func (*GetTaxonomyRequest_TaxonomyPrefix) isGetTaxonomyRequest_GetBy() {}

func (*GetTaxonomyRequest_TaxonomyNamespace) isGetTaxonomyRequest_GetBy() {}

type GetTaxonomyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the requested taxonomy
	Taxonomy *Taxonomy `protobuf:"bytes,1,opt,name=taxonomy,proto3" json:"taxonomy,omitempty"`
	// related taxonomies
	Taxonomies map[int32]*Taxonomy `protobuf:"bytes,2,rep,name=taxonomies,proto3" json:"taxonomies,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // key = taxonomy_id
	Types      map[int32]*Type     `protobuf:"bytes,3,rep,name=types,proto3" json:"types,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`           // key = type_id
	Enums      map[int32]*Enum     `protobuf:"bytes,4,rep,name=enums,proto3" json:"enums,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`           // key = enum_id
	Concepts   map[int32]*Concept  `protobuf:"bytes,5,rep,name=concepts,proto3" json:"concepts,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`     // key = concept_id
}

func (x *GetTaxonomyReply) Reset() {
	*x = GetTaxonomyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xbrl_v1_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaxonomyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaxonomyReply) ProtoMessage() {}

func (x *GetTaxonomyReply) ProtoReflect() protoreflect.Message {
	mi := &file_xbrl_v1_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaxonomyReply.ProtoReflect.Descriptor instead.
func (*GetTaxonomyReply) Descriptor() ([]byte, []int) {
	return file_xbrl_v1_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *GetTaxonomyReply) GetTaxonomy() *Taxonomy {
	if x != nil {
		return x.Taxonomy
	}
	return nil
}

func (x *GetTaxonomyReply) GetTaxonomies() map[int32]*Taxonomy {
	if x != nil {
		return x.Taxonomies
	}
	return nil
}

func (x *GetTaxonomyReply) GetTypes() map[int32]*Type {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *GetTaxonomyReply) GetEnums() map[int32]*Enum {
	if x != nil {
		return x.Enums
	}
	return nil
}

func (x *GetTaxonomyReply) GetConcepts() map[int32]*Concept {
	if x != nil {
		return x.Concepts
	}
	return nil
}

type GetInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to GetBy:
	//	*GetInstanceRequest_InstanceId
	GetBy isGetInstanceRequest_GetBy `protobuf_oneof:"get_by"`
}

func (x *GetInstanceRequest) Reset() {
	*x = GetInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xbrl_v1_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceRequest) ProtoMessage() {}

func (x *GetInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xbrl_v1_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceRequest) Descriptor() ([]byte, []int) {
	return file_xbrl_v1_rpc_proto_rawDescGZIP(), []int{2}
}

func (m *GetInstanceRequest) GetGetBy() isGetInstanceRequest_GetBy {
	if m != nil {
		return m.GetBy
	}
	return nil
}

func (x *GetInstanceRequest) GetInstanceId() int64 {
	if x, ok := x.GetGetBy().(*GetInstanceRequest_InstanceId); ok {
		return x.InstanceId
	}
	return 0
}

type isGetInstanceRequest_GetBy interface {
	isGetInstanceRequest_GetBy()
}

type GetInstanceRequest_InstanceId struct {
	InstanceId int64 `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3,oneof"`
}

func (*GetInstanceRequest_InstanceId) isGetInstanceRequest_GetBy() {}

type GetInstanceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance   *Instance           `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Contexts   map[int64]*Context  `protobuf:"bytes,2,rep,name=contexts,proto3" json:"contexts,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Units      map[int64]*Unit     `protobuf:"bytes,3,rep,name=units,proto3" json:"units,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Facts      map[int64]*Fact     `protobuf:"bytes,4,rep,name=facts,proto3" json:"facts,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Taxonomies map[int32]*Taxonomy `protobuf:"bytes,5,rep,name=taxonomies,proto3" json:"taxonomies,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Concepts   map[int32]*Concept  `protobuf:"bytes,6,rep,name=concepts,proto3" json:"concepts,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Types      map[int32]*Type     `protobuf:"bytes,7,rep,name=types,proto3" json:"types,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Enums      map[int32]*Enum     `protobuf:"bytes,8,rep,name=enums,proto3" json:"enums,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetInstanceReply) Reset() {
	*x = GetInstanceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xbrl_v1_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceReply) ProtoMessage() {}

func (x *GetInstanceReply) ProtoReflect() protoreflect.Message {
	mi := &file_xbrl_v1_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceReply.ProtoReflect.Descriptor instead.
func (*GetInstanceReply) Descriptor() ([]byte, []int) {
	return file_xbrl_v1_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *GetInstanceReply) GetInstance() *Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *GetInstanceReply) GetContexts() map[int64]*Context {
	if x != nil {
		return x.Contexts
	}
	return nil
}

func (x *GetInstanceReply) GetUnits() map[int64]*Unit {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *GetInstanceReply) GetFacts() map[int64]*Fact {
	if x != nil {
		return x.Facts
	}
	return nil
}

func (x *GetInstanceReply) GetTaxonomies() map[int32]*Taxonomy {
	if x != nil {
		return x.Taxonomies
	}
	return nil
}

func (x *GetInstanceReply) GetConcepts() map[int32]*Concept {
	if x != nil {
		return x.Concepts
	}
	return nil
}

func (x *GetInstanceReply) GetTypes() map[int32]*Type {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *GetInstanceReply) GetEnums() map[int32]*Enum {
	if x != nil {
		return x.Enums
	}
	return nil
}

var File_xbrl_v1_rpc_proto protoreflect.FileDescriptor

var file_xbrl_v1_rpc_proto_rawDesc = []byte{
	0x0a, 0x11, 0x78, 0x62, 0x72, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x73, 0x64, 0x66, 0x2e, 0x78, 0x62, 0x72, 0x6c, 0x2e, 0x76,
	0x31, 0x1a, 0x16, 0x78, 0x62, 0x72, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x78, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x78, 0x62, 0x72, 0x6c, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x9d, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x0a, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x74,
	0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x2f, 0x0a, 0x12, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x67, 0x65, 0x74, 0x5f, 0x62,
	0x79, 0x22, 0xa9, 0x05, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x73, 0x64, 0x66, 0x2e,
	0x78, 0x62, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x52, 0x08, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x12, 0x4e, 0x0a, 0x0a, 0x74, 0x61,
	0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x61, 0x73, 0x64, 0x66, 0x2e, 0x78, 0x62, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54,
	0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x73, 0x64, 0x66,
	0x2e, 0x78, 0x62, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x78, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x73, 0x64,
	0x66, 0x2e, 0x78, 0x62, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x78,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x12, 0x48, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x61, 0x73, 0x64, 0x66, 0x2e, 0x78, 0x62, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x1a, 0x55, 0x0a, 0x0f, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f,
	0x6d, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x73, 0x64,
	0x66, 0x2e, 0x78, 0x62, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a,
	0x0a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61,
	0x73, 0x64, 0x66, 0x2e, 0x78, 0x62, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x0a, 0x45,
	0x6e, 0x75, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x64,
	0x66, 0x2e, 0x78, 0x62, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x52, 0x0a, 0x0d, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73,
	0x64, 0x66, 0x2e, 0x78, 0x62, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x41, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x79,
	0x22, 0xe5, 0x08, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x73, 0x64, 0x66, 0x2e, 0x78,
	0x62, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x73,
	0x64, 0x66, 0x2e, 0x78, 0x62, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x73, 0x64, 0x66, 0x2e, 0x78, 0x62, 0x72, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x73, 0x64, 0x66, 0x2e, 0x78, 0x62, 0x72, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d,
	0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x73, 0x64, 0x66,
	0x2e, 0x78, 0x62, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f,
	0x6d, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x61, 0x78, 0x6f, 0x6e,
	0x6f, 0x6d, 0x69, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x73, 0x64, 0x66, 0x2e, 0x78,
	0x62, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12,
	0x3f, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x61, 0x73, 0x64, 0x66, 0x2e, 0x78, 0x62, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x3f, 0x0a, 0x05, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x61, 0x73, 0x64, 0x66, 0x2e, 0x78, 0x62, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x1a, 0x52, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x64, 0x66, 0x2e, 0x78, 0x62, 0x72, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x64, 0x66, 0x2e, 0x78, 0x62, 0x72, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x0a, 0x46, 0x61, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x64, 0x66, 0x2e, 0x78, 0x62, 0x72, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x55, 0x0a, 0x0f, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x73, 0x64, 0x66, 0x2e, 0x78, 0x62, 0x72,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x52, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x64,
	0x66, 0x2e, 0x78, 0x62, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x0a,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73,
	0x64, 0x66, 0x2e, 0x78, 0x62, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x0a, 0x45, 0x6e,
	0x75, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x64, 0x66,
	0x2e, 0x78, 0x62, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xaf, 0x01, 0x0a, 0x0b, 0x58, 0x62, 0x72,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x12, 0x20, 0x2e, 0x61, 0x73, 0x64, 0x66, 0x2e, 0x78,
	0x62, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x73, 0x64, 0x66,
	0x2e, 0x78, 0x62, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x78, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4f, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x61, 0x73, 0x64, 0x66, 0x2e,
	0x78, 0x62, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x73, 0x64,
	0x66, 0x2e, 0x78, 0x62, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x1f, 0x5a, 0x1d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x72, 0x6f, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x78, 0x62, 0x72, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_xbrl_v1_rpc_proto_rawDescOnce sync.Once
	file_xbrl_v1_rpc_proto_rawDescData = file_xbrl_v1_rpc_proto_rawDesc
)

func file_xbrl_v1_rpc_proto_rawDescGZIP() []byte {
	file_xbrl_v1_rpc_proto_rawDescOnce.Do(func() {
		file_xbrl_v1_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_xbrl_v1_rpc_proto_rawDescData)
	})
	return file_xbrl_v1_rpc_proto_rawDescData
}

var file_xbrl_v1_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_xbrl_v1_rpc_proto_goTypes = []interface{}{
	(*GetTaxonomyRequest)(nil), // 0: asdf.xbrl.v1.GetTaxonomyRequest
	(*GetTaxonomyReply)(nil),   // 1: asdf.xbrl.v1.GetTaxonomyReply
	(*GetInstanceRequest)(nil), // 2: asdf.xbrl.v1.GetInstanceRequest
	(*GetInstanceReply)(nil),   // 3: asdf.xbrl.v1.GetInstanceReply
	nil,                        // 4: asdf.xbrl.v1.GetTaxonomyReply.TaxonomiesEntry
	nil,                        // 5: asdf.xbrl.v1.GetTaxonomyReply.TypesEntry
	nil,                        // 6: asdf.xbrl.v1.GetTaxonomyReply.EnumsEntry
	nil,                        // 7: asdf.xbrl.v1.GetTaxonomyReply.ConceptsEntry
	nil,                        // 8: asdf.xbrl.v1.GetInstanceReply.ContextsEntry
	nil,                        // 9: asdf.xbrl.v1.GetInstanceReply.UnitsEntry
	nil,                        // 10: asdf.xbrl.v1.GetInstanceReply.FactsEntry
	nil,                        // 11: asdf.xbrl.v1.GetInstanceReply.TaxonomiesEntry
	nil,                        // 12: asdf.xbrl.v1.GetInstanceReply.ConceptsEntry
	nil,                        // 13: asdf.xbrl.v1.GetInstanceReply.TypesEntry
	nil,                        // 14: asdf.xbrl.v1.GetInstanceReply.EnumsEntry
	(*Taxonomy)(nil),           // 15: asdf.xbrl.v1.Taxonomy
	(*Instance)(nil),           // 16: asdf.xbrl.v1.Instance
	(*Type)(nil),               // 17: asdf.xbrl.v1.Type
	(*Enum)(nil),               // 18: asdf.xbrl.v1.Enum
	(*Concept)(nil),            // 19: asdf.xbrl.v1.Concept
	(*Context)(nil),            // 20: asdf.xbrl.v1.Context
	(*Unit)(nil),               // 21: asdf.xbrl.v1.Unit
	(*Fact)(nil),               // 22: asdf.xbrl.v1.Fact
}
var file_xbrl_v1_rpc_proto_depIdxs = []int32{
	15, // 0: asdf.xbrl.v1.GetTaxonomyReply.taxonomy:type_name -> asdf.xbrl.v1.Taxonomy
	4,  // 1: asdf.xbrl.v1.GetTaxonomyReply.taxonomies:type_name -> asdf.xbrl.v1.GetTaxonomyReply.TaxonomiesEntry
	5,  // 2: asdf.xbrl.v1.GetTaxonomyReply.types:type_name -> asdf.xbrl.v1.GetTaxonomyReply.TypesEntry
	6,  // 3: asdf.xbrl.v1.GetTaxonomyReply.enums:type_name -> asdf.xbrl.v1.GetTaxonomyReply.EnumsEntry
	7,  // 4: asdf.xbrl.v1.GetTaxonomyReply.concepts:type_name -> asdf.xbrl.v1.GetTaxonomyReply.ConceptsEntry
	16, // 5: asdf.xbrl.v1.GetInstanceReply.instance:type_name -> asdf.xbrl.v1.Instance
	8,  // 6: asdf.xbrl.v1.GetInstanceReply.contexts:type_name -> asdf.xbrl.v1.GetInstanceReply.ContextsEntry
	9,  // 7: asdf.xbrl.v1.GetInstanceReply.units:type_name -> asdf.xbrl.v1.GetInstanceReply.UnitsEntry
	10, // 8: asdf.xbrl.v1.GetInstanceReply.facts:type_name -> asdf.xbrl.v1.GetInstanceReply.FactsEntry
	11, // 9: asdf.xbrl.v1.GetInstanceReply.taxonomies:type_name -> asdf.xbrl.v1.GetInstanceReply.TaxonomiesEntry
	12, // 10: asdf.xbrl.v1.GetInstanceReply.concepts:type_name -> asdf.xbrl.v1.GetInstanceReply.ConceptsEntry
	13, // 11: asdf.xbrl.v1.GetInstanceReply.types:type_name -> asdf.xbrl.v1.GetInstanceReply.TypesEntry
	14, // 12: asdf.xbrl.v1.GetInstanceReply.enums:type_name -> asdf.xbrl.v1.GetInstanceReply.EnumsEntry
	15, // 13: asdf.xbrl.v1.GetTaxonomyReply.TaxonomiesEntry.value:type_name -> asdf.xbrl.v1.Taxonomy
	17, // 14: asdf.xbrl.v1.GetTaxonomyReply.TypesEntry.value:type_name -> asdf.xbrl.v1.Type
	18, // 15: asdf.xbrl.v1.GetTaxonomyReply.EnumsEntry.value:type_name -> asdf.xbrl.v1.Enum
	19, // 16: asdf.xbrl.v1.GetTaxonomyReply.ConceptsEntry.value:type_name -> asdf.xbrl.v1.Concept
	20, // 17: asdf.xbrl.v1.GetInstanceReply.ContextsEntry.value:type_name -> asdf.xbrl.v1.Context
	21, // 18: asdf.xbrl.v1.GetInstanceReply.UnitsEntry.value:type_name -> asdf.xbrl.v1.Unit
	22, // 19: asdf.xbrl.v1.GetInstanceReply.FactsEntry.value:type_name -> asdf.xbrl.v1.Fact
	15, // 20: asdf.xbrl.v1.GetInstanceReply.TaxonomiesEntry.value:type_name -> asdf.xbrl.v1.Taxonomy
	19, // 21: asdf.xbrl.v1.GetInstanceReply.ConceptsEntry.value:type_name -> asdf.xbrl.v1.Concept
	17, // 22: asdf.xbrl.v1.GetInstanceReply.TypesEntry.value:type_name -> asdf.xbrl.v1.Type
	18, // 23: asdf.xbrl.v1.GetInstanceReply.EnumsEntry.value:type_name -> asdf.xbrl.v1.Enum
	0,  // 24: asdf.xbrl.v1.XbrlService.GetTaxonomy:input_type -> asdf.xbrl.v1.GetTaxonomyRequest
	2,  // 25: asdf.xbrl.v1.XbrlService.GetInstance:input_type -> asdf.xbrl.v1.GetInstanceRequest
	1,  // 26: asdf.xbrl.v1.XbrlService.GetTaxonomy:output_type -> asdf.xbrl.v1.GetTaxonomyReply
	3,  // 27: asdf.xbrl.v1.XbrlService.GetInstance:output_type -> asdf.xbrl.v1.GetInstanceReply
	26, // [26:28] is the sub-list for method output_type
	24, // [24:26] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_xbrl_v1_rpc_proto_init() }
func file_xbrl_v1_rpc_proto_init() {
	if File_xbrl_v1_rpc_proto != nil {
		return
	}
	file_xbrl_v1_taxonomy_proto_init()
	file_xbrl_v1_instance_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_xbrl_v1_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaxonomyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xbrl_v1_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaxonomyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xbrl_v1_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xbrl_v1_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_xbrl_v1_rpc_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*GetTaxonomyRequest_TaxonomyId)(nil),
		(*GetTaxonomyRequest_TaxonomyPrefix)(nil),
		(*GetTaxonomyRequest_TaxonomyNamespace)(nil),
	}
	file_xbrl_v1_rpc_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*GetInstanceRequest_InstanceId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xbrl_v1_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_xbrl_v1_rpc_proto_goTypes,
		DependencyIndexes: file_xbrl_v1_rpc_proto_depIdxs,
		MessageInfos:      file_xbrl_v1_rpc_proto_msgTypes,
	}.Build()
	File_xbrl_v1_rpc_proto = out.File
	file_xbrl_v1_rpc_proto_rawDesc = nil
	file_xbrl_v1_rpc_proto_goTypes = nil
	file_xbrl_v1_rpc_proto_depIdxs = nil
}
